// Signature format: 4.0
package com.google.accompanist.pager {

  public final class ClippingKt {
  }

  @kotlin.RequiresOptIn(message="Accompanist Pager is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalPagerApi {
  }

  public final class Pager {
    method @androidx.compose.runtime.Composable @com.google.accompanist.pager.ExperimentalPagerApi public static void HorizontalPager(com.google.accompanist.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional boolean reverseLayout, optional float itemSpacing, optional boolean dragEnabled, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional androidx.compose.ui.Alignment.Vertical verticalAlignment, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, kotlin.jvm.functions.Function2<? super com.google.accompanist.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
    method @androidx.compose.runtime.Composable @com.google.accompanist.pager.ExperimentalPagerApi public static void VerticalPager(com.google.accompanist.pager.PagerState state, optional androidx.compose.ui.Modifier modifier, optional boolean reverseLayout, optional float itemSpacing, optional boolean dragEnabled, optional androidx.compose.foundation.gestures.FlingBehavior flingBehavior, optional androidx.compose.ui.Alignment.Vertical verticalAlignment, optional androidx.compose.ui.Alignment.Horizontal horizontalAlignment, kotlin.jvm.functions.Function2<? super com.google.accompanist.pager.PagerScope,? super java.lang.Integer,kotlin.Unit> content);
    method @com.google.accompanist.pager.ExperimentalPagerApi public static float calculateCurrentOffsetForPage(com.google.accompanist.pager.PagerScope, int page);
  }

  @com.google.accompanist.pager.ExperimentalPagerApi public final class PagerDefaults {
    method @Deprecated @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.FlingBehavior defaultPagerFlingConfig(com.google.accompanist.pager.PagerState state, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec);
    method @androidx.compose.runtime.Composable public androidx.compose.foundation.gestures.FlingBehavior rememberPagerFlingConfig(com.google.accompanist.pager.PagerState state, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> snapAnimationSpec);
    field public static final com.google.accompanist.pager.PagerDefaults INSTANCE;
  }

  @androidx.compose.runtime.Stable @com.google.accompanist.pager.ExperimentalPagerApi public interface PagerScope {
    method public int getCurrentPage();
    method public float getCurrentPageOffset();
    property public abstract int currentPage;
    property public abstract float currentPageOffset;
  }

  @androidx.compose.runtime.Stable @com.google.accompanist.pager.ExperimentalPagerApi public final class PagerState implements androidx.compose.foundation.gestures.ScrollableState {
    ctor public PagerState(@IntRange(from=0) int pageCount, optional @IntRange(from=0) int currentPage, optional @FloatRange(from=0.0, to=1.0) float currentPageOffset, optional int offscreenLimit, optional boolean infiniteLoop, androidx.compose.foundation.lazy.LazyListState lazyListState);
    method public suspend Object? animateScrollToPage(@IntRange(from=0) int page, optional @FloatRange(from=0.0, to=1.0) float pageOffset, optional kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public int getCurrentLayoutPage();
    method @IntRange(from=0) public int getCurrentPage();
    method public float getCurrentPageOffset();
    method public androidx.compose.foundation.interaction.InteractionSource getInteractionSource();
    method public androidx.compose.foundation.lazy.LazyListState getLazyListState();
    method @IntRange(from=0) public int getPageCount();
    method public int getTargetPage();
    method public suspend Object? scrollToPage(@IntRange(from=0) int page, optional @FloatRange(from=0.0, to=1.0) float pageOffset, optional kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    method public void setPageCount(@IntRange(from=0) int value);
    property public final int currentLayoutPage;
    property @IntRange(from=0) public final int currentPage;
    property public final float currentPageOffset;
    property public final androidx.compose.foundation.interaction.InteractionSource interactionSource;
    property public final androidx.compose.foundation.lazy.LazyListState lazyListState;
    property @IntRange(from=0) public final int pageCount;
    property public final int targetPage;
    field public static final com.google.accompanist.pager.PagerState.Companion Companion;
  }

  public static final class PagerState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.google.accompanist.pager.PagerState,?> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.google.accompanist.pager.PagerState,?> Saver;
  }

  public final class PagerStateKt {
    method @androidx.compose.runtime.Composable @com.google.accompanist.pager.ExperimentalPagerApi public static com.google.accompanist.pager.PagerState rememberPagerState(@IntRange(from=0) int pageCount, optional @IntRange(from=0) int initialPage, optional @FloatRange(from=0.0, to=1.0) float initialPageOffset, optional @IntRange(from=1) int initialOffscreenLimit, optional boolean infiniteLoop, optional androidx.compose.foundation.lazy.LazyListState lazyListState);
  }

}

